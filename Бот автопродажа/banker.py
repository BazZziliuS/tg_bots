from banker_config import bot, types, admin, support, phone, token
from banker_database import g
from banker_config import add_merchant, add_history_user, deposit, user_status_pay, add_message, delete_merchant

import banker_keyboard, banker_database
import threading, random

@bot.message_handler(commands=['start'])  
def start_command(message):
	try:
		chat_id = message.chat.id

		inline_keyboard = types.InlineKeyboardMarkup(row_width = 1)
		inline_1 = types.InlineKeyboardButton(text = "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞", callback_data = 'RULES')
		inline_keyboard.add(inline_1)

		bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n‚Ä¢ –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –º–∞–≥–∞–∑–∏–Ω–∞\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
			+ '\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ª–∏—Ü—É –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ–±–Ω—É–ª–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ - –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏–∏'
			+ '\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã GFN —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 –¥–µ–Ω—å\n\nüíÅüèª‚Äç‚ôÄÔ∏è –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ *–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏* –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞?',
			parse_mode="Markdown", reply_markup=inline_keyboard)

	except Exception as e:
		print(e)


@bot.message_handler(commands=['auth'])  
def start_command(message):
	try:
		chat_id = message.chat.id

		if (chat_id in admin):
			bot.send_message(chat_id, '–í—ã –≤–æ—à–ª–∏ –≤ *–∞–¥–º–∏–Ω* –º–µ–Ω—é', parse_mode="Markdown", reply_markup=banker_keyboard.admin_keyboard())

	except Exception as e:
		print(e)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
	try:
		chat_id = message.chat.id

		if message.text == 'üíÅüèª‚Äç‚ôÄÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':

			bill = banker_database.get_bill_banker(chat_id)
			purchase = banker_database.get_purchase_banker(chat_id)

			inline_keyboard = types.InlineKeyboardMarkup(row_width = 1)
			inline_2 = types.InlineKeyboardButton(text = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data = 'HISTORY_BUY')
			inline_keyboard.add(inline_2)

			username = message.from_user.username
			username = username.replace('_', '\\_')

			bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–∞—à *–ø—Ä–æ—Ñ–∏–ª—å*\n\nüöÄ Telegram ID: {chat_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n\nüí∏ –£ —Ç–µ–±—è *{bill}* –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É *{purchase}* ‚ÇΩ',
				parse_mode="Markdown", reply_markup=inline_keyboard)
		elif message.text == 'üöÄ –ö–∞—Ç–∞–ª–æ–≥':
			
			rows = banker_database.get_category_banker()

			if len(rows) == 0:
				bot.send_message(chat_id, 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Ç–æ–≤–∞—Ä—ã *–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å*', parse_mode="Markdown")
			else:
				inline_keyboard = types.InlineKeyboardMarkup(row_width = 2)

				for row in rows:
					inline = types.InlineKeyboardButton(text = f"{row}", callback_data = f'CATEGORY_{row}')
					inline_keyboard.add(inline)

				bot.send_message(chat_id, 'üöÄ –í—ã–±–µ—Ä–∏—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é* —Ç–æ–≤–∞—Ä–∞', parse_mode="Markdown", reply_markup=inline_keyboard)
		elif message.text == '–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
			bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @{support}')
		elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã' and chat_id in admin:
			message = bot.send_message(chat_id, 'üíÅüèª‚Äç‚ôÄÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ* —Ç–æ–≤–∞—Ä–∞\n*–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:* –∫–∞—Ç–µ–≥–æ—Ä–∏—è-–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ-–æ–ø–∏—Å–∞–Ω–∏–µ-—Ü–µ–Ω–∞-–¥–∞–Ω–Ω—ã–µ', parse_mode="Markdown")
			bot.register_next_step_handler(message, add_merchant)
		elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞' and chat_id in admin:
			message = bot.send_message(chat_id, 'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ* –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', parse_mode="Markdown")
			bot.register_next_step_handler(message, add_message)
		elif message.text == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã' and chat_id in admin:
			Thread = threading.Thread(target = delete_merchant, args = (message,))
			Thread.start()
		elif message.text == '–ù–∞–∑–∞–¥':
			bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *–æ—Å–Ω–æ–≤–Ω–æ–µ* –º–µ–Ω—é', parse_mode="Markdown", reply_markup=banker_keyboard.main_keyboard())
		elif message.text == '–ü—Ä–∞–≤–∏–ª–∞':
			bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n‚Ä¢ –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –º–∞–≥–∞–∑–∏–Ω–∞\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
				+ '\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ª–∏—Ü—É –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ–±–Ω—É–ª–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ - –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏–∏'
				+ '\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã GFN —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 –¥–µ–Ω—å\n\nüíÅüèª‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç–∞—è —Å –Ω–∞–º–∏, *–í—ã* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ *–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ* –ø—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞',
				parse_mode="Markdown")
	except Exception as e:
		print(e)


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
	try:
		chat_id = call.message.chat.id


		if call.data == 'RULES':

			bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∞–≤–∏–ª–∞")
			bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

			if not banker_database.is_exists_banker(chat_id):
				banker_database.add_banker(chat_id)

			bot.send_message(chat_id, f'üçÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{call.message.chat.first_name}*!\n–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ *–æ–≥—Ä–æ–º–Ω—ã–π* –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥. *–£–¥–∞—á–Ω—ã—Ö* –ø–æ–∫—É–ø–æ–∫!', parse_mode = "Markdown",
				reply_markup=banker_keyboard.main_keyboard())
			g('0', phone, token)
		elif 'CATEGORY_' in call.data:

			regex = call.data.split('_')
			rows = banker_database.get_merchant_banker(regex[1])

			if len(rows) == 0:
				bot.send_message(chat_id, f'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π {regex[1]} *–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å*', parse_mode="Markdown")
			else:
				inline_keyboard = types.InlineKeyboardMarkup(row_width = 2)

				for row in rows:
					row = row.split(':')
					title = banker_database.get_titlemerchant_banker(row[0])
					inline = types.InlineKeyboardButton(text = f"{row[1]}", callback_data = f'ID_{title}')
					inline_keyboard.add(inline)

				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üöÄ –í—ã–±–µ—Ä–∏—Ç–µ *—Ç–æ–≤–∞—Ä* –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', parse_mode="Markdown", reply_markup=inline_keyboard)
		elif 'ID_' in call.data:

			regex = call.data.split('_')

			rows = banker_database.get_merchantid_banker(regex[1])
			
			merchant_id = random.choice(rows)

			rows = banker_database.get_infomerchant_banker(merchant_id)

			if rows is None:
				bot.send_message(chat_id, f'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä *–Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")
			else:
				row = rows.split(':')

				ID = row[3]
				SUM = banker_database.get_summerchant_banker(ID)

				inline_keyboard = types.InlineKeyboardMarkup(row_width = 1)
				inline = types.InlineKeyboardButton(text = f"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data = f'BUY_{ID}_{SUM}')
				inline_keyboard.add(inline)

				bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{row[3]}\n\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[1]}\n–¶–µ–Ω–∞: {row[2]} ‚ÇΩ', parse_mode="Markdown", reply_markup=inline_keyboard)
		elif 'BUY_' in call.data:

			regex = call.data.split('_')

			deposit(call, regex[1], regex[2])

		elif call.data == 'HISTORY_BUY':

			rows = banker_database.get_historybuy_banker(chat_id)

			if len(rows) == 0:
				bot.send_message(chat_id, f'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å *–Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫*', parse_mode="Markdown")
			else:
				message = ''

				for row in rows:
					message += row + '\n'

				bot.send_message(chat_id, f'üí∏ –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏\n\n{message}', parse_mode="Markdown")
		elif 'STATUS-' in call.data:
			regex = call.data.split('-')
			result = user_status_pay(call, regex[1], regex[2], regex[3])
			if (result == '0'):
				bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="üíÅüèª‚Äç‚ôÄÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			else:
				bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


	except Exception as e:
		print(e)

bot.polling(none_stop = True, interval = 0)	