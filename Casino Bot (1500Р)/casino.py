from casino_config import bot, types, in_deposit, user_status_pay, status_bot
from casino_config import user_invite_code, user_update_code, token, phone, enter_promo, bill_create, phone
from casino_config import nvuti, dice, coinflip, crash, crash_end, clear_stats, deposit, enter_receive
import casino_config, database, keyboard
import threading, time, configparser

@bot.message_handler(commands=['start'])  
def start_command(message):
	try:
		chat_id = message.chat.id
		code = message.text.split()

		if (not database.user_exists_casino(chat_id)):
			if (len(code) == 2):
				exists = database.worker_exists_code(code[1])

				if (exists is not False):
					username = message.from_user.username

					database.user_add_casino(chat_id, username, code[1])
					bot.send_message(chat_id, f"üôãüèª‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{message.from_user.first_name}*\n–£ –Ω–∞—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –≤–∏–¥–∞ –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
						parse_mode="Markdown", reply_markup = keyboard.casino_keyboard())

					casino_config.notification_thread_ref(code[1], message.from_user.first_name, username)
				else:	
					message = bot.send_message(chat_id, '‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ *–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ* –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞', parse_mode="Markdown")
					bot.register_next_step_handler(message, user_invite_code)
			else:
				message = bot.send_message(chat_id, 'üíÅüèª‚Äç‚ôÄÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, *–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ* –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞', parse_mode="Markdown")
				bot.register_next_step_handler(message, user_invite_code)
		else:
			if (database.user_invite_code(chat_id) == '0'):
				message = bot.send_message(chat_id, 'üíÅüèª‚Äç‚ôÄÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, *–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ* –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞', parse_mode="Markdown")
				bot.register_next_step_handler(message, user_update_code)
			else:
				bot.send_message(chat_id, f"üôãüèª‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{message.from_user.first_name}*\n–£ –Ω–∞—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –≤–∏–¥–∞ –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
					parse_mode="Markdown", reply_markup = keyboard.casino_keyboard())
	except:
		bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ *—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞–≤ /start", parse_mode="Markdown")

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
	chat_id = message.chat.id

	config = configparser.ConfigParser()
	config.read("default.ini")
	status = config['Telegram']['messages']

	try:
		if (status != '0'):
			if (message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"):

				balance 	= casino_config.repl_percent(database.user_balance(chat_id))
				win 		= database.user_win(chat_id)
				lose		= database.user_lose(chat_id)
				receive 	= database.user_receives(chat_id)
				payments 	= database.user_count_payments(chat_id)

				inline_keyboard = types.InlineKeyboardMarkup(row_width = 2)
				inline_1 = types.InlineKeyboardButton(text = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data = 'DEPOSIT')
				inline_2 = types.InlineKeyboardButton(text = "–í—ã–≤–µ—Å—Ç–∏", callback_data = 'RECEIVE')
				inline_3 = types.InlineKeyboardButton(text = "–ü—Ä–æ–º–æ–∫–æ–¥", callback_data = 'PROMOCODE')
				inline_4 = types.InlineKeyboardButton(text = "–û–±–Ω—É–ª–∏—Ç—å", callback_data = 'CLEAR')
				inline_keyboard.add(inline_1, inline_2, inline_3, inline_4)

				bot.send_message(chat_id, f'üí∏ –í–∞—à *–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n–ë–∞–ª–∞–Ω—Å: *{balance}* ‚ÇΩ\n\n–ò–≥—Ä –≤—Å–µ–≥–æ - *{win + lose}*\n–ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ - *{win}*\n–ò–≥—Ä –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ - *{lose}*'
					+ f'\n\n–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ - *{receive}*\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π - *{payments}*',
					parse_mode="Markdown", reply_markup=inline_keyboard)
			elif (message.text == "–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞"):
				bot.send_message(chat_id, f'üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @{str(casino_config.support)}')
			elif (message.text == "–ò–≥—Ä–∞—Ç—å"):
				database.user_update_username(chat_id, casino_config.repl(message.from_user.username))
				bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ *—Ä–µ–∂–∏–º* –∏–≥—Ä—ã', parse_mode="Markdown", reply_markup=keyboard.game_keyboard())
			elif (message.text == "–ù–∞–∑–∞–¥"):
				bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *–≥–ª–∞–≤–Ω–æ–µ* –º–µ–Ω—é', parse_mode="Markdown", reply_markup=keyboard.casino_keyboard())
			elif (message.text == "Random Number"):
				balance 	= casino_config.repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, nvuti)
			elif (message.text == "Dice"):
				balance 	= casino_config.repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, dice)
			elif (message.text == "–û—Ä–µ–ª & –†–µ—à–∫–∞"):
				balance 	= casino_config.repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, coinflip)
			elif (message.text == "–ù–∞–∑a–¥"):
				bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *–≥–ª–∞–≤–Ω–æ–µ* –º–µ–Ω—é', token, phone, parse_mode="Markdown", reply_markup=keyboard.casino_keyboard())
			elif (message.text == 'Crash'):
				balance 	= casino_config.repl_percent(database.user_balance(chat_id))
				message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} ‚ÇΩ', parse_mode="Markdown", reply_markup=keyboard.clear_keyboard())
				bot.register_next_step_handler(message, crash)
			elif (message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
				crash_end(message)
			elif (message.text == "–ü–æ–ºo—à—å"):
				bot.send_message(chat_id, f'üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @{str(casino_config.helps)}')
			elif (message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É'):
				bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ *—Å–ø–∏—Å–æ–∫* –∏–≥—Ä', parse_mode="Markdown", reply_markup=keyboard.game_keyboard())
		else:
			bot.send_message(chat_id, 'üíÅüèª‚Äç‚ôÄÔ∏è –ë–æ—Ç –Ω–∞ *—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö* —Ä–∞–±–æ—Ç–∞—Ö', parse_mode="Markdown")
	except:
		pass

@bot.callback_query_handler(func=lambda call: True)
def answer(call):
	chat_id = call.message.chat.id
	
	try:
		if (call.data == 'PROMOCODE'):
			message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *–ø—Ä–æ–º–æ–∫–æ–¥*', parse_mode="Markdown")
			bot.register_next_step_handler(message, enter_promo)
		elif (call.data == "CLEAR"):
			clear_stats(call)
		elif (call.data == "DEPOSIT"):
			message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å—É–º–º—É* –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 250 ‚ÇΩ –¥–æ 5000 ‚ÇΩ)', parse_mode="Markdown")
			bot.register_next_step_handler(message, deposit)
		elif (call.data == "STATUS"):
			Thread = threading.Thread(target = user_status_pay, args = (call,))
			Thread.start()
		elif (call.data == "RECEIVE"):
			message = bot.send_message(chat_id, f'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Å–≤–æ–π* QIWI –∫–æ—à–µ–ª–µ–∫\n–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≤–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ QIWI, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Å—Ç—É–ø–∞–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!', parse_mode="Markdown")
			bot.register_next_step_handler(message, enter_receive)
	except:
		pass
		
bot.polling(none_stop = True, interval = 0)			