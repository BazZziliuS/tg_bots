
import logging
import functions as func
import menu
import math
import texts
import random
import time
import asyncio
import threading
import datetime

import utils.dice as dice

import traceback

from utils.user import *
from states import *

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage


# Configure logging
logging.basicConfig(level=logging.INFO)


bot = Bot(token=config.config('bot_token'))

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    check = await func.first_join(message.chat.id, message.chat.first_name, message.chat.username, message.text, bot)

    await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=menu.main_menu(), parse_mode='html')


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if str(message.chat.id) in config.config('admin_id_manager'):
        await message.answer('/check user_id - –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', reply_markup=menu.admin_menu())
        

@dp.message_handler()
async def send_message(message: types.Message):
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    if message.text == menu.main_menu_btn[0]: # Games
        await bot.send_message(chat_id=chat_id, text='–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:', reply_markup=dice.dice_menu())
        await func.check_user_data(bot, chat_id)

    if message.text == menu.main_menu_btn[3]: # Games
        await bot.send_message(chat_id=chat_id, text='–°–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è –≤ –±–æ—Ç–µ?\n\n–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã - @otzivmela')
        await func.check_user_data(bot, chat_id)

    if message.text == menu.main_menu_btn[4]: # Games
        await bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\nüö∏–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ –∫—É–±–∏–∫ –∏–ª–∏ –∂–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Ç–æ —Ç–µ–±–µ –≤ –Ω–∞—à —á–∞—Ç!\nüö∏–í—Å—Ç—É–ø–∞–π –≤ –Ω–µ–≥–æ - https://t.me/joinchat/JfmH7VCNzMg1x2YzMgBajg')
        await func.check_user_data(bot, chat_id)

    if message.text == menu.main_menu_btn[2]: # Help
        await bot.send_message(chat_id=chat_id, text=dice.help_txt)
        await func.check_user_data(bot, chat_id)

    if message.text == menu.main_menu_btn[1]: # profile
        info = func.profile(chat_id)
        msg = texts.profile.format(
                id=info[0],
                login=f'@{username}',
                data=info[5][:19],
                balance=info[3]
            )

        await bot.send_message(chat_id=chat_id, text=msg, reply_markup=menu.profile())
        await func.check_user_data(bot, chat_id)

    if '/check ' in message.text:
        try:
            if str(message.chat.id) in config.config('admin_id_manager'):
                user = User(message.text.split(' ')[1])
                if user.who_invite != '0':
                    who_invite = await bot.get_chat(user.who_invite)
                    who_invite = f'{who_invite.id} | @{who_invite.username}'
                else:
                    who_invite = '–ù–∏–∫—Ç–æ'
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"""
USER_ID: {user.user_id}
–ù–∏–∫: {user.first_name}
–õ–æ–≥–∏–Ω: {user.username}
–ë–∞–ª–∞–Ω—Å: {user.balance}
–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {who_invite}
–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞: {user.date}
"""
                )
        except:
            await message.answer('–û—à–∏–±–∫–∞')

@dp.callback_query_handler()
async def handler_call(call: types.CallbackQuery, state: FSMContext):
    chat_id = call.from_user.id
    message_id = call.message.message_id
    first_name = call.from_user.first_name
    username = call.from_user.username


    if call.data == 'qiwi':
        resp = func.replenish_balance(chat_id)
        await bot.send_message(chat_id=chat_id, text=resp[0], reply_markup=resp[1], parse_mode='html')

    if call.data == 'banker':
        await bot.send_message(chat_id=chat_id, text='–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @melvin_hb', parse_mode='html')

    if call.data == 'withdraw':
        await Withdraw.withdraw_sum.set()
        await bot.send_message(chat_id=chat_id, text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç {config.config("min_withdraw_sum")} –¥–æ {User(chat_id).balance} RUB')

    if call.data == 'cancel_payment':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ùï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')

    if call.data == 'check_payment':
        check = func.check_payment(chat_id)
        if check[0] == 1:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\n–°—É–º–º–∞ - {check[1]} —Ä—É–±')

            try:
                await bot.send_message(chat_id=config.config('channel_logs'), text=texts.logs.format(
                    'QIWI',
                    first_name,
                    f'@{username}',
                    chat_id,
                    datetime.datetime.now(),
                    check[1]
                ))
            except:
                pass

        if check[0] == 0:
            await bot.send_message(chat_id=chat_id, text='‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=menu.to_close)

    if call.data == 'admin_info':
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=func.admin_info(),
            reply_markup=menu.admin_menu(),
            parse_mode='html'
        )

    if call.data == 'give_balance':
        await Admin_give_balance.user_id.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å')

    if call.data == 'email_sending':
        await bot.send_message(chat_id=chat_id, text='–í—ã–±–∏—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=menu.email_sending())

    if call.data == 'email_sending_photo':
        await Email_sending_photo.photo.set()
        await bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!')

    if call.data == 'email_sending_text':
        await Admin_sending_messages.text.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',)

    if call.data == 'email_sending_info':
                bot.send_message(chat_id=chat_id, text="""
–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å:

1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""")
                bot.send_message(chat_id=chat_id, text="""
–¢–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:

1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""",
                    parse_mode='html'
                    )

    if call.data == 'create_dice':
        await CreateGame.bet.set()
        await bot.send_message(chat_id=chat_id,
                               text=f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –æ—Ç {config.config("min_bank")} –¥–æ {User(chat_id).balance} RUB',
                               reply_markup=dice.cancel_dice())

    if call.data == 'reload_dice':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:',
                                    reply_markup=dice.dice_menu())

    if call.data == 'my_games_dice':
        resp = dice.my_games_dice(chat_id)

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=resp[0], reply_markup=resp[1])

    if call.data == 'rating_dice':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dice.rating_dice(chat_id),
                                    reply_markup=dice.back_dice())

    if call.data == 'back_dice':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='‚úÖ–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:',
                                    reply_markup=dice.dice_menu())

    if call.data == 'help_dice':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dice.help_txt)

    if call.data == 'cancel_dice':
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        await bot.clear_step_handler_by_chat_id(chat_id)

    if 'dice_game:' in call.data:
        game = dice.Game(call.data.split(':')[1])
        if game.status == True and game.user_id != str(chat_id):
            info = dice.dice_game(call.data.split(':')[1])

            if info == False:
                await bot.send_message(chat_id=chat_id, text='üö´ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            else:
                await bot.send_message(chat_id=chat_id, text=info[0], reply_markup=info[1])
        else:
            await bot.send_message(chat_id=chat_id, text='üö´ –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π')

    if 'start_game_dice:' in call.data:
        game = dice.Game(call.data.split(':')[1])
        if game.status != False and game.user_id != str(chat_id):
            if User(chat_id).balance >= game.bet:
                await dice.main_start(game, bot, chat_id)
            else:
                await bot.send_message(chat_id=chat_id, text='‚ùå–î–ª—è –∏–≥—Ä—ã –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')
        else:
            await bot.send_message(chat_id=chat_id, text='‚ùå–û—à–∏–±–∫–∞')

    if call.data == 'exit':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='html')

    if call.data == 'back_to_admin_menu':
        await bot.send_message(chat_id=chat_id, text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=menu.admin_menu())

    if call.data == 'withdrawal_requests':
        await bot.send_message(chat_id=chat_id, text='–õ–∏—Å—Ç', reply_markup=func.withdrawal_requests())

    if 'withdraw:' in call.data:
        info = func.get_info_withdraw(call.data.split(':')[1])

        await bot.send_message(chat_id=chat_id, text=info[0], reply_markup=info[1])

    if 'withdraw_del:' in call.data:
        await func.withdraw_del(call.data.split(':')[1], bot)
        await bot.send_message(chat_id=chat_id, text='–£–¥–∞–ª–µ–Ω–æ')


@dp.message_handler(state=Admin_give_balance.user_id)
async def admin_give_balance_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.text

    await Admin_give_balance.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –±–∞–ª–∞–Ω—Å')


@dp.message_handler(state=Admin_give_balance.balance)
async def admin_give_balance_2(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['balance'] = float(message.text)

            await Admin_give_balance.next()
            await message.answer(f"""
ID: {data['user_id']}
–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞: {data['balance']}

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +
""")
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_give_balance.confirm)
async def admin_give_balance_3(message: types.Message, state: FSMContext):
    if message.text == '+':
        async with state.proxy() as data:
            func.give_balance(data['balance'], data['user_id'])

            await message.answer('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=menu.admin_menu())
    else:
        await message.answer('‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()

@dp.message_handler(state=Email_sending_photo.photo, content_types=['photo'])
async def email_sending_photo_1(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['photo'] = random.randint(111111111, 999999999)

        await message.photo[-1].download(f'photos/{data["photo"]}.jpg')
        await Email_sending_photo.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.text)
async def email_sending_photo_2(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['text'] = message.text

            with open(f'photos/{data["photo"]}.jpg', 'rb') as photo:

                await message.answer_photo(photo, data['text'], parse_mode='html')

            await Email_sending_photo.next()
            await message.answer('–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu.admin_sending())
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')

@dp.message_handler(state=Email_sending_photo.action)
async def email_sending_photo_3(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        if message.text in menu.admin_sending_btn:
            if message.text == menu.admin_sending_btn[0]: # –ù–∞—á–∞—Ç—å
            
                users = func.get_users_list()
                
                start_time = time.time()
                amount_message = 0
                amount_bad = 0
                async with state.proxy() as data:
                    photo_name = data["photo"]
                    text = data["text"]

                await state.finish()

                try:
                    await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É',
                        reply_markup=menu.admin_menu()
                        )
                except: pass

                
                for i in range(len(users)):
                    print(photo_name)
                    try:
                        with open(f'photos/{photo_name}.jpg', 'rb') as photo:
                            await bot.send_photo(
                                chat_id=users[i][0],
                                photo=photo,
                                caption=text,
                                parse_mode='html')
                        amount_message += 1
                    except Exception as e:
                        amount_bad += 1
                
                sending_time = time.time() - start_time

                try:
                    await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                        f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                        f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                        f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                        
                        )              
                except:
                    pass

            elif message.text == menu.admin_sending_btn[1]: # –û—Ç–ª–æ–∂–∏—Ç—å
                await Email_sending_photo.next()

                await bot.send_message(
                    chat_id=chat_id,
                    text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–ï–ù–¨:–ß–ê–°–û–í:–ú–ò–ù–£–¢

–ù–∞–ø—Ä–∏–º–µ—Ä 18:14:10 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 18 —á–∏—Å–ª–∞ –≤ 14:10
"""
                )
                
            elif message.text == menu.admin_sending_btn[2]:
                await state.finish()

                await bot.send_message(
                    message.chat.id, 
                    text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 
                    reply_markup=menu.main_menu()
                )
                
                await bot.send_message(
                    message.chat.id, 
                    text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', 
                    reply_markup=menu.admin_menu()
                )
        else:   
            await bot.send_message(
                message.chat.id, 
                text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', 
                reply_markup=menu.admin_sending())

    except Exception as e:
        await state.finish()
        await bot.send_message(
            chat_id=message.chat.id,
            text='‚ö†Ô∏è ERROR ‚ö†Ô∏è'
        )


@dp.message_handler(state=Email_sending_photo.set_down_sending)
async def email_sending_photo_4(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            date = data['date']

            if int(date.split(':')[0]) > 0 and int(date.split(':')[0]) < 33:
                if int(date.split(':')[1]) >= 0 and int(date.split(':')[1]) <= 24:
                    if int(date.split(':')[2]) >= 0 and int(date.split(':')[2]) < 61:
                        await Email_sending_photo.next()

                        await bot.send_message(
                            chat_id=message.chat.id,
                            text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +'
                        )
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.set_down_sending_confirm)
async def email_sending_photo_5(message: types.Message, state: FSMContext):
    if message.text == '+':
        async with state.proxy() as data:
            data['type_sending'] = 'photo'

            func.add_sending(data)

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {data["date"]}',
                reply_markup=menu.admin_menu()
            )
    else:
        bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=menu.admin_menu())

    await state.finish()

@dp.message_handler(state=Admin_sending_messages.text)
async def admin_sending_messages_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text

        await message.answer(data['text'], parse_mode='html')

        await Admin_sending_messages.next()
        await bot.send_message(
            chat_id=message.chat.id,
            text='–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=menu.admin_sending()
        )


@dp.message_handler(state=Admin_sending_messages.action)
async def admin_sending_messages_2(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    if message.text in menu.admin_sending_btn:
        if message.text == menu.admin_sending_btn[0]: # –ù–∞—á–∞—Ç—å

            users = func.get_users_list()

            start_time = time.time()
            amount_message = 0
            amount_bad = 0

            async with state.proxy() as data:
                text = data['text']

            await state.finish()

            try:
                await bot.send_message(
                    chat_id=config.config('admin_id_manager').split(':')[0],
                    text=f'‚úÖ –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É',
                    reply_markup=menu.admin_menu())
            except: pass

            for i in range(len(users)):
                try:
                    await bot.send_message(users[i][0], text, parse_mode='html')
                    amount_message += 1
                except Exception as e:
                    amount_bad += 1
            
            sending_time = time.time() - start_time

            try:
                await bot.send_message(
                    chat_id=config.config('admin_id_manager').split(':')[0],
                    text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                    f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                    f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                    f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                    
                    )              
            except:
                print('ERROR ADMIN SENDING')

        elif message.text == menu.admin_sending_btn[1]: # –û—Ç–ª–æ–∂–∏—Ç—å
            await Admin_sending_messages.next()

            await bot.send_message(
                chat_id=chat_id,
                text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–ï–ù–¨:–ß–ê–°–û–í:–ú–ò–ù–£–¢\n

–ù–∞–ø—Ä–∏–º–µ—Ä 18:14:10 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 18 —á–∏—Å–ª–∞ –≤ 14:10
"""
            )

        elif message.text == menu.admin_sending_btn[2]:
            await bot.send_message(
                message.chat.id, 
                text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 
                reply_markup=menu.main_menu()
            )
            await bot.send_message(
                message.chat.id, 
                text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', 
                reply_markup=menu.admin_menu()
            )
            await state.finish()
        else:   
            await bot.send_message(
                message.chat.id, 
                text='–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', 
                reply_markup=menu.admin_sending())


@dp.message_handler(state=Admin_sending_messages.set_down_sending)
async def admin_sending_messages_3(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            date = data['date']

            if int(date.split(':')[0]) > 0 and int(date.split(':')[0]) < 33:
                if int(date.split(':')[1]) >= 0 and int(date.split(':')[1]) <= 24:
                    if int(date.split(':')[2]) >= 0 and int(date.split(':')[2]) < 61:
                        await Admin_sending_messages.next()

                        await bot.send_message(
                            chat_id=message.chat.id,
                            text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +'
                        )
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_sending_messages.set_down_sending_confirm)
async def admin_sending_messages_4(message: types.Message, state: FSMContext):
    if message.text == '+':
        async with state.proxy() as data:
            data['type_sending'] = 'text'
            data['photo'] = random.randint(111111,9999999)

            func.add_sending(data)

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {data["date"]}',
                reply_markup=menu.admin_menu()
            )
    else:
        bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=menu.admin_menu())

    await state.finish()

@dp.message_handler(state=Admin_buttons.admin_buttons_del)
async def admin_buttons_del(message: types.Message, state: FSMContext):
    try:
        func.admin_del_btn(message.text)

        await message.answer('–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=menu.admin_menu())
        await state.finish()
    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add)
async def admin_buttons_add(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['name'] = message.text

        await Admin_buttons.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_text)
async def admin_buttons_add_text(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['text'] = message.text

        await Admin_buttons.next()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_photo, content_types=['photo'])
async def admin_buttons_add_photo(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['photo'] = random.randint(111111111, 999999999)

        await message.photo[-1].download(f'photos/{data["photo"]}.jpg')

        with open(f'photos/{data["photo"]}.jpg', 'rb') as photo:
            await message.answer_photo(photo, data['text'], parse_mode='html')
        
        await Admin_buttons.next()
        await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ +')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_confirm)
async def admin_buttons_add_confirm(message: types.Message, state: FSMContext):
    if message.text == '+':
        async with state.proxy() as data:
            func.admin_add_btn(data["name"], data["text"], data["photo"])

            await message.answer('–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=menu.admin_menu())
    else:
        await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=CreateGame.bet)
async def creategame_bet(message: types.Message, state: FSMContext):
    await state.finish()

    chat_id = message.chat.id
    try:
        user = User(chat_id)
        bet = float('{:.2f}'.format(float(message.text)))

        if bet <= user.balance and bet >= float(config.config('min_bank')):
            user.update_balance(-bet)
            dice.create_game(chat_id, bet)

            await bot.send_message(
                chat_id=message.chat.id,
                text='‚úÖ–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!'
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text='‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞'
            )
    except Exception as e:
        await bot.send_message(
            chat_id=message.chat.id,
            text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É'
        )


@dp.message_handler(state=Withdraw.withdraw_sum)
async def withdraw_sum(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        withdraw_sum = float('{:.2f}'.format(float(message.text)))

        user = User(chat_id)

        if withdraw_sum >= float(config.config('min_withdraw_sum')) and withdraw_sum <= user.balance:
            async with state.proxy() as data:
                data['withdraw_sum'] = withdraw_sum
            
            await Withdraw.next()
            await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞')
        else:
            await state.finish()
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ –≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞')

    except Exception as e:
        await state.finish()
        await bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


@dp.message_handler(state=Withdraw.info)
async def withdraw_info(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        info = message.text
    
        async with state.proxy() as data:
            data['info'] = info
        
        await Withdraw.next()
        await message.answer(f'–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n{info}\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +')

    except Exception as e:
        await state.finish()
        await bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


@dp.message_handler(state=Withdraw.confirm)
async def withdraw_confirm(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        if message.text == '+':
            async with state.proxy() as data:
                if func.add_withdraw(chat_id, data['withdraw_sum'], data['info']) == True:
                    await bot.send_message(chat_id=message.chat.id, text='–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥!')
        else:
            await bot.send_message(chat_id=message.chat.id, text='–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω')

        await state.finish()
    except Exception as e:
        state.finish()
        await bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')


async def sending_check(wait_for):
    while True:
        await asyncio.sleep(wait_for)

        try:
            info = func.sending_check()

            if info != False:
                users = func.get_users_list()

                start_time = time.time()
                amount_message = 0
                amount_bad = 0

                if info[0] == 'text':
                    try:
                        await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏')
                    except: pass

                    for i in range(len(users)):
                        try:
                            await bot.send_message(users[i][0], info[1], parse_mode='html')
                            amount_message += 1
                        except Exception as e:
                            amount_bad += 1
                    
                    sending_time = time.time() - start_time

                    try:
                        await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                            f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                            f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                            f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                            
                            )              
                    except:
                        print('ERROR ADMIN SENDING')

                elif info[0] == 'photo':
                    try:
                        await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏')
                    except: pass

                    
                    for i in range(len(users)):
                        try:
                            with open(f'photos/{info[2]}.jpg', 'rb') as photo:
                                await bot.send_photo(
                                    chat_id=users[i][0],
                                    photo=photo,
                                    caption=info[1],
                                    parse_mode='html')
                            amount_message += 1
                        except:
                            amount_bad += 1
                    
                    sending_time = time.time() - start_time

                    try:
                        await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                            f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                            f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                            f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                            
                            )              
                    except:
                        print('ERROR ADMIN SENDING')

            else:
                pass
        except Exception as e: 
            print(e)


if __name__ == '__main__':

    executor.start_polling(dp, skip_updates=True)
