import telebot, sqlite3, random, string, csv, os
from SimpleQIWI import *
from telebot import types

curdir = os.curdir

bot = telebot.TeleBot('1621985834:AAF25Dq-yVRsjvzlcZPpvySWcsj58LlLQR0') #—Ç–æ–∫–µ–Ω –±–æ—Ç–∞

admins = [304746706] #–∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤

phone = '' #–Ω–æ–º–µ—Ä –∫–∏–≤–∏

token = '' #—Ç–æ–∫–µ–Ω –∫–∏–≤–∏ —Å –ø–µ—Ä–≤—ã–º–∏ 3 –≥–∞–ª–æ—á–∫–∞–º–∏

price24 = 2990 #—Ü–µ–Ω–∞ 2.4+ –≤–µ—Ä—Å–∏–∏

price3duo = 4990 #—Ü–µ–Ω–∞ 3–¥—É–æ –≤–µ—Ä—Å–∏–∏

pricemulti = 2490 #—Ü–µ–Ω–∞ 3–º—É–ª—å—Ç–∏ –≤–µ—Ä—Å–∏–∏

pricestick = 150 #—Ü–µ–Ω–∞ –∑–∞ 1 –ø–∞—á–∫—É —Å—Ç–∏–∫–æ–≤

telegram = '@faulmit' #–Ω–∏–∫–Ω–µ–π–º —Ç–µ–ª–µ–≥—Ä–∞–º–º

id1 = []

def add_message(message):
        if (message.text != '–ù–∞–∑–∞–¥'):
            rows = get_usersId_banker()

            for row in rows:
                try:
                    bot.send_message(row, message.text)
                except Exception as e:
                    print(e)
                    continue

def get_usersId_banker():
    try:
        array = []

        with sqlite3.connect("users.db") as con:
            cur = con.cursor()
            rows = cur.execute("SELECT user_id FROM user").fetchall()

            for row in rows:
                array.append(row[0])

        return array
    except Exception as e:
        print(e)


def bill_create(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))


def deposit(chat_id, price):
    try:
        chat_id = chat_id
        global amount
        amount = price
        billId = str(f'{bill_create(6)}_{random.randint(10000, 999999)}')

        inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
        inline_1 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                                  callback_data=f'STATUS-{billId}-{amount}')
        inline_keyboard.add(inline_1)
        message = bot.send_message(chat_id,
                                       f'üíÅüèª‚Äç‚ôÄÔ∏è *–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ* {str(amount)} ‚ÇΩ –Ω–∞ QIWI\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω *10* –º–∏–Ω—É—Ç\n\n–ù–æ–º–µ—Ä: `+{phone}`\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{billId}`\n\n_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á—Ç–æ–±—ã –∏—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å_',
                                       parse_mode="Markdown",
                                       reply_markup=inline_keyboard)


    except Exception as e:
        print(e)


def user_status_pay(call, billId, amount):
    chat_id = call.message.chat.id
    api = QApi(phone=phone, token=token)
    payments = api.payments['data']
    for info_payment in payments:
        if info_payment['comment'] == billId:
            if str(amount) == str(info_payment['sum']['amount']):
                bot.send_message(chat_id, '‚úÖ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ')
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            else:
                bot.answer_callback_query(callback_query_id=call.message.id, show_alert=False,
                                          text="üíÅüèª‚Äç‚ôÄÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

