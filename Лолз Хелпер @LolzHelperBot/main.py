try:
    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
    import telebot
    import datetime
    import random
    import time
    import json
    import requests
    import sys

    from telebot import types

    import urllib.request, phonenumbers, sqlite3, os

    from datetime import datetime, date, timedelta

    from phonenumbers import geocoder, carrier, timezone

    from bs4 import BeautifulSoup as bs

    import threading

    lock = threading.Lock()
    conn = sqlite3.connect('base.db', check_same_thread=False)
    cur = conn.cursor()

    # –§–∞–π–ª—ã
    import kb
    import cfg
    import functions as func
    import general as gen

    bot = telebot.TeleBot(cfg.TOKEN)
    chat_ids_file = 'data/ids.txt'
    conn = sqlite3.connect("base.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
            (user_id TEXT, name TEXT, data TEXT, short INTEGER, deanon INTEGER, gen_pass INTEGER, gen_name INTEGER, ip INTEGER, tg_id INTEGER, screen INTEGER)''')
    q = conn.cursor()
    q.execute('''CREATE TABLE IF NOT EXISTS ban
            (user_id TEXT)''')
    w = conn.cursor()
    w.execute('''CREATE TABLE IF NOT EXISTS sett
            (user_id TEXT, kolvo TEXT, big TEXT, little TEXT, num TEXT, symb TEXT)''')    
    e = conn.cursor()
    conn.commit()
    conn.close()


    def save_chat_id(chat_id):
        chat_id = str(chat_id)
        with open(chat_ids_file,"a+") as ids_file:
            ids_file.seek(0)

            ids_list = [line.split('\n')[0] for line in ids_file]

            if chat_id not in ids_list:
                ids_file.write(f'{chat_id}\n')
                ids_list.append(chat_id)
                dtn = datetime.now()
                print(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}, –≤—Ä–µ–º—è {dtn}')
            else:
                dtn = datetime.now()
                print(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –≤—Ä–µ–º—è {dtn}')
        return

    def send_message_users(message):
        with open(chat_ids_file, "r") as ids_file:
            ids_list = [line.split('\n')[0] for line in ids_file]
        bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç –æ—Ç—á–µ—Ç.', reply_markup=kb.admin)
        no = 0
        ye = 0
        for chat_id in ids_list:
            data = {
                'chat_id': chat_id,
                'from_chat_id': message.chat.id,
                'message_id': message.message_id,
                'disable_notification': False
            }
            response = requests.post(f'https://api.telegram.org/bot{cfg.TOKEN}/forwardMessage', data=data)
            if '"ok":true' in response.text:
                ye += 1
            if 'bot was blocked' in response.text:
                no += 1
        bot.send_message(message.chat.id, f'–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ - <pre>{no}</pre>, –¥–æ—à–ª–æ - <pre>{ye}</pre>', parse_mode='HTML')



    def generator_url(message):
        try:
            if str(message.text) == 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
                bot.send_message(message.chat.id, '‚ö°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', parse_mode='HTML', reply_markup=kb.main)
            elif "http" in str(message.text):
                bot.send_message(message.chat.id, f'‚ôªÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å—Å—ã–ª–∫–∞ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è!\n–≠—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥',parse_mode='HTML', reply_markup=kb.main)
                text = ''
                r = requests.get(f'https://bitly.su/api/?api=6cc27794b7d2d7cee3bf3d93141a7251b1cef652&url={message.text}')
                data = json.loads(r.text)
                link1 = data['shortenedUrl']
                linkRequest = {"destination": message.text, "domain": { "fullName": "rebrand.ly" }}
                requestHeaders = {"Content-type": "application/json","apikey": "a2b087f48d5c4b2785c9a80bf210ad96",}
                r = requests.post("https://api.rebrandly.com/v1/links", data = json.dumps(linkRequest), headers=requestHeaders)
                linkss = r.json()
                requestHeaders = {"Content-type": "application/x-www-form-urlencoded"}
                r = requests.post("https://goo.su/api/convert", data = f'token=9diDHhJOrxWgCMiwoiy9kkamxkUUGTocUlv7MuCJMQpuwpw0OlTcs5ObNOn4&url={message.text}', headers=requestHeaders)
                data = json.loads(r.text)
                link11 = str(data['short_url'])
                r2 = requests.get(f"{cfg.clck_url_2}{message.text}")
                r3 = requests.get(f"{cfg.clck_url_3}{message.text}")
                r4 = requests.get(f"{cfg.clck_url_4}{message.text}")
                #r5 = requests.get(f"{cfg.clck_url_5}{message.text}")
                text = f"""
1Ô∏è‚É£ {text}{link1}
2Ô∏è‚É£ https://{text}{r2.text}
3Ô∏è‚É£ {text}{link11}
4Ô∏è‚É£ {text}{r3.text}
5Ô∏è‚É£ {text}{r4.text}
    """
                func.act_count_link("add", message.chat.id,)
                bot.send_message(message.chat.id, f'üîó –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:\n{text}',parse_mode='HTML',disable_web_page_preview = True, reply_markup=kb.main)
            else:
                bot.send_message(message.chat.id, f'üîó –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!',parse_mode='HTML', reply_markup=kb.main)

        except Exception as e:
                bot.send_message(message.chat.id, f'‚öí –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!',parse_mode='HTML', reply_markup=kb.main)
                print(e)
                

    def iddef(message):
        if str(message.text) == 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '‚ö°Ô∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='HTML', reply_markup=kb.main)
        else:
            try:
                bot.send_message(message.chat.id, f'''<b>‚ôªÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.
–≠—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥</b>''', parse_mode='HTML', reply_markup=kb.main)
                r = requests.get('http://d4n13l3k00.ml/api/checkTgId?uid=' + message.text).json()['data']
                if r == 'NOT_FOUND':
                    bot.send_message(message.chat.id, f'''<b> üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>

üòû <code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ..</code>
    ''', parse_mode='HTML', reply_markup=kb.main)
                

                else:
                    info = r.split('|')
                    num = info[0].split('\n')
                    text = message.text + '\n'
                    if num[0].isdigit() == True and text == info[1]:
                        bot.send_message(message.chat.id, f'''<b> üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>
                    
üÜî <b>–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> - <code>{info[1]}</code>                
üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> - <code>{num[0]}</code>
    ''', parse_mode='HTML', reply_markup=kb.main)
                        func.act_count_tg_id("add", message.chat.id,)
                    else:
                        print(num[0].isdigit())
                        print(f'{num[0]}')
                        bot.send_message(message.chat.id, f'''<b>—Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b>''', parse_mode='HTML', reply_markup=kb.main)
            except Exception as e:
                print(e)
                time.sleep(3.3)
                bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π ID! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=kb.main)


    def screenshot(message):
        if str(message.text) == 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '‚ö°Ô∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='HTML', reply_markup=kb.main)
        else:
            try:
                user_link = str(message.text)
                r = requests.get(f"https://webshot.deam.io/{user_link}/?width=1440&height=1024?type=png")
                bot.send_photo(message.chat.id, r.content, caption=f'–°–∫—Ä–∏–Ω—à–æ—Ç —Å —Å–∞–π—Ç–∞ "{user_link}"', parse_mode='HTML', reply_markup=kb.main)
                func.act_count_screen("add", message.chat.id,)
            except Exception as e:
                bot.send_message(message.chat.id, '–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=kb.main)
                print(e)


    def ipdef(message):
        if str(message.text) == 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '‚ö°Ô∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='HTML', reply_markup=kb.main)
        else:
            try:
                r = requests.get(f"https://api.ipdata.co/{message.text}?api-key=7149ffee49a432bb1c7557e3235afdf78a2d22fcdde3a4ecd7a5d5ca")
                data = json.loads(r.text)
                city = str(data['city'])
                region = str(data['region'])
                country_name = str(data['country_name'])
                country_code = str(data['country_code'])
                continent_name = str(data['continent_name'])
                continent_code = str(data['continent_code'])
                calling_code = str(data['calling_code'])
                latitude = str(data['latitude'])
                longitude = str(data['longitude'])
                postal = str(data['postal'])
                
                time_zone = str(data['time_zone']['name'])
                time_zone2 = str(data['time_zone']['current_time'])
                
                currency = str(data['currency']['name'])
                currency2 = str(data['currency']['code'])
                
                #languages = str(data['languages']['name']) Error = list indices must be integers or slices, not str
                
                bot.send_message(message.chat.id, f'''<b> üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>

<b>IP</b> - {message.text}

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>–ì–æ—Ä–æ–¥</b>: <code>{city}</code> | <code>{region}</code>
<b>–°—Ç—Ä–∞–Ω–∞</b>: <code>{country_name} ({country_code})</code>
<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>: <code>{time_zone}</code>
<b>–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã</b>: <code>+{calling_code}</code>
<b>–®–∏—Ä–æ—Ç–∞</b>: <code>{latitude}</code> | <b>–î–æ–ª–≥–æ—Ç–∞</b>: <code>{longitude}</code>
<b>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å</b>: <code>{postal}</code>
<b>–ö–æ–Ω—Ç–∏–Ω–µ—Ç</b>: <code>{continent_name} ({continent_code})</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>–í–∞–ª—é—Ç–∞</b>: <code>{currency} ({currency2})</code>
<b>–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è</b>: <code>{time_zone2}</code>
    ''', parse_mode='HTML', reply_markup=kb.main)
                func.act_count_ip("add", message.chat.id,)
            except Exception as e:
                bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π –∞–π–ø–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=kb.main)
                print(e)
       
    def deanondef(message):
        if str(message.text) == 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '‚ö°Ô∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='HTML', reply_markup=kb.main)
        else:
                try:
                    if '+' in str(message.text):                    
                            z = phonenumbers.parse(str(message.text), None)
                            vall = phonenumbers.is_valid_number(z)
                            if vall == True:
                                vall = '–°—É—â–µ—Å—Ç–≤—É–µ—Ç'
                            else:
                                vall = '–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                            coun = geocoder.description_for_number(z, 'ru')
                            timee = timezone.time_zones_for_geographical_number(z)
                            oper = carrier.name_for_number(z, "ru")
                    
                            uty = requests.get("https://api.whatsapp.com/send?phone="+str(message.text))
                            if uty.status_code==200:
                                utl2 = f'https://api.whatsapp.com/send?phone={message.text}'
                                what = types.InlineKeyboardMarkup(row_width=2)
                                what.add(
                                types.InlineKeyboardButton(text='‚úÖ Whatsapp', url=utl2),
                                )
                            else:
                                utl2 = '–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                                what = types.InlineKeyboardMarkup(row_width=2)
                                what.add(
                                types.InlineKeyboardButton(text='‚úÖ Whatsapp', url=utl2)                            )
                            answer = ''
                            try:
                                resAV = requests.get('https://mirror.bullshit.agency/search_by_phone/'+str(message.text))
                                contentAV = bs(resAV.text, 'html.parser')
                                h1 = contentAV.find('h1')
                                if h1.text == '503 Service Temporarily Unavailable':
                                    answer += f'–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
                                else:
                                    for url in contentAV.find_all(['a']):
                                        user_link = url['href']
                                        try:
                                            avito_url = requests.get('https://mirror.bullshit.agency'+user_link)
                                            content = bs(avito_url.text, 'html.parser')
                                            url = content.find(['a'])
                                            
                                            linkAV = url['href']
                                            answer += f'{linkAV}\n'
                                        except:
                                            answer += f'{user_link}\n'
                                            continue
                            except:
                                answer += '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
                            if answer == '' or answer == ' ':
                                answer += '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
                            else:
                                pass
                            num = str(message.text)
                            rq = requests.post('https://www.instagram.com/accounts/account_recovery_send_ajax/',
                                        data={'email_or_username':num[1:]},
                                        headers={'accept-encoding':'gzip, deflate, br', 'accept-language':'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                                        'content-type':'application/x-www-form-urlencoded', 'cookie':'ig_did=06389D42-D5BA-42C2-BCA6-49C2913D682B; csrftoken=SSEx9Bf0HmcQ8uCJVmh66Z4qBhu1F0iL; mid=XyIqeAALAAF1N7j0GbPCNuWhznuX; rur=FRC; urlgen="{\"109.252.48.249\": 25513\054 \"109.252.48.225\": 25513}:1k5JBz:E-7UgfDDLsdtlKvXiWBUphtFMdw"',
                                        'referer':'https://www.instagram.com/accounts/password/reset/', 'origin':'https://www.instagram.com',
                                        'user-agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 OPR/69.0.3686.95 (Edition Yx)',
                                        'x-csrftoken':'SSEx9Bf0HmcQ8uCJVmh66Z4qBhu1F0iL', 'x-ig-app-id':'936619743392459',
                                        'x-instagram-ajax': 'a9aec8fa634f', 'x-requested-with': 'XMLHttpRequest'})
                            aq = rq.json()
                            if aq['status'] == 'ok':
                                insta = '–°—É—â–µ—Å—Ç–≤—É–µ—Ç'
                            else:
                                insta = '–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                            user_all_info = f"""
<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É {message.text}</b>:

‚îú{z}
‚îú<b>–°—Ç—Ä–∞–Ω–∞</b>: <code>{coun}</code>
‚îú<b>–û–ø–µ—Ä–∞—Ç–æ—Ä</b>: <code>{oper}</code>
‚îú<b>–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ</b>: <code>{vall}</code>
‚îú<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>: <code>{timee}</code>
‚îú<b>Avito</b>: <code>{answer}</code>
‚îú<b>Instagram</b>: <code>{insta}</code>
‚îî<b>WhatsApp</b>: {utl2}"""
                            bot.send_message(message.chat.id, user_all_info, parse_mode='HTML', reply_markup=what, disable_web_page_preview = True)
                            bot.send_message(message.chat.id, '‚ö°Ô∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='HTML', reply_markup=kb.main)
                            func.act_count_deanon("add", message.chat.id,)
                    else:
                        bot.send_message(message.chat.id, f'üòù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ.', parse_mode='HTML', reply_markup=kb.main)
                except Exception as e:
                    bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üòù', reply_markup=kb.main)
                    print(e)
                
                
                
    @bot.message_handler(commands=['start'])
    def handle_start_command(message):
        user_id = message.chat.id
        if str(message.chat.id) in open(chat_ids_file).read():
            chat_id=message.from_user.id
            func.first_join(user_id=chat_id, name=message.from_user.username)
            bot.send_message(message.from_user.id, f'üëã', reply_markup=kb.main, parse_mode='HTML')
        elif str(message.chat.id) not in open(chat_ids_file).read():
            chat_id=message.from_user.id
            func.first_join(user_id=chat_id, name=message.from_user.username)
            bot.send_message(message.from_user.id, f'üëã –ü—Ä–∏–≤–µ—Ç –Ω–æ–≤–µ–Ω—å–∫–∏–π', reply_markup=kb.main, parse_mode='HTML')
            save_chat_id(message.chat.id) 

    @bot.message_handler(content_types=['text'])
    def send_text(message):
        save_chat_id(message.chat.id)
        u = message.chat.id
        u_u = message.chat.username
        user_id = message.chat.id
        chat_id = message.chat.id
        if message.text == 'üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É':
            msg = bot.send_message(u, '<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:\n\n–ü—Ä–∏–º–µ—Ä:</b> <code>https://google.com/</code>',parse_mode='HTML', reply_markup=kb.cancle)
            bot.register_next_step_handler(msg, generator_url)

        elif message.text == 'üîé –î–µ–∞–Ω–æ–Ω':
            ab = bot.send_message(u, 'üîé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–º–µ—Å—Ç–µ —Å +):', parse_mode='HTML', reply_markup=kb.cancle)
            bot.register_next_step_handler(ab, deanondef)

        elif message.text == 'üñº –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç':
            ab = bot.send_message(u, '''üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –≤–µ–±—Å–∞–π—Ç–æ–≤.
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∏ —Å–¥–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ''', parse_mode='HTML', reply_markup=kb.cancle)
            bot.register_next_step_handler(ab, screenshot)

        elif message.text == 'üñ• –ü—Ä–æ—Ñ–∏–ª—å':
            conn = sqlite3.connect("base.db")
            cursor = conn.cursor()
            base = cursor.execute(f'SELECT * FROM users WHERE user_id = "{u}"').fetchone()
            bot.send_message(u, f'''üôã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!
ü§´ –¢–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

üÜî <b>Id</b>: <code>{u}</code>
üë§ <b>Username</b>: @{u_u}
üï∞ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>: {base[2]}

‚úÇÔ∏è <b>–°—Å—ã–ª–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–æ</b>: <code>{base[3]}</code>
üö® <b>–ü—Ä–æ–±–∏—Ç–æ –Ω–æ–º–µ—Ä–æ–≤</b>: <code>{base[4]}</code>
üñä <b>–ù–∏–∫–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>: <code>{base[6]}</code>
üåè <b>IP –ø—Ä–æ–±–∏—Ç–æ</b>: <code>{base[7]}</code>
üë• <b>TG —é–∑–µ—Ä–æ–≤ –ø—Ä–æ–±–∏—Ç–æ</b>: <code>{base[9]}</code>
üëª <b>–ü—Ä–æ–∫—Å–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>: <code>{base[8]}</code>
üñº <b>–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–¥–µ–ª–∞–Ω–æ</b>: <code>{base[10]}</code>
    ''', parse_mode='HTML')

        elif message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP':
            ab = bot.send_message(u, '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ ip –∞–¥—Ä–µ—Å—Å:', parse_mode='HTML', reply_markup=kb.cancle)
            bot.register_next_step_handler(ab, ipdef)
            
        elif message.text == 'üÜî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ID':
            ab = bot.send_message(u, 'üÜî <b>–í–≤–µ–¥–∏—Ç–µ id —é–∑–∞—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–±–∏—Ç—å:</b>\n\n<code>–ü—Å—Å: –ü–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–Ω–æ –≤ –±–æ—Ç–µ</code> @userinfobot', parse_mode='HTML', reply_markup=kb.cancle)
            bot.register_next_step_handler(ab, iddef)

        elif message.text == 'üìÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            bot.send_message(chat_id=chat_id, text=func.users_info(), reply_markup=kb.info, parse_mode='HTML')
            
        elif message.text == '‚ôªÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä':
            bot.send_message(u, f'''‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:''', reply_markup=kb.gen, parse_mode='HTML')
        elif message.text == 'üÜò –ü–æ–º–æ—â—å111f':
            bot.send_message(u, f'''üÜò –° –∫–∞–∫–∏–º —Ä–∞–∑–¥–µ–ª–æ–º –í–∞–º –ø–æ–º–æ—á—å?''', reply_markup=kb.spas, parse_mode='HTML')
        elif message.text == '1üñº –°–∫—Ä–∏–Ω—ã –¥–ª—è —Å–∫–∞–º–∞':
            bot.send_message(u, f'''üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:''', reply_markup=kb.screen, parse_mode='HTML')
        elif message.text == '/a':
            if chat_id in cfg.admin:
                bot.send_message(chat_id=chat_id, text=func.stata(qq=message.message_id), reply_markup=kb.admin, parse_mode='HTML')
            else:
                bot.send_message(chat_id=chat_id, text='‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=kb.main, parse_mode='HTML')

    #try:
    @bot.callback_query_handler(func=lambda call: True)
    def callback_inline(call):
        user_id = call.message.chat.id
        u = call.message.chat.id
        message = call.message
        message_id = call.message.message_id

        if call.data == 'top_donator':
            msg = bot.send_message(u, '''<b>–¢–æ–ø 10 –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤</b>
@MagTro - 70–†
@riobunt - 30–†
@Spark_Admins - 11–†''', parse_mode='HTML')
        if call.data == 'sender':
            msg = bot.send_message(u, '–ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–¥–µ —è –∞–¥–º–∏–Ω:')
            bot.register_next_step_handler(msg, send_message_users)
        if call.data == 'gen_pass':
            bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: (–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –æ—Ñ—Ñ)''', reply_markup=kb.gen_pass, parse_mode='HTML')
        if call.data == 'gen_nick':
            bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:)''', reply_markup=kb.gen_nick, parse_mode='HTML')
        if call.data == 'gene_nick':
                line = random.choice(open('names.txt').readlines())
                bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''
‚úÖ <b>–ù–∏–∫</b> —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:
<code>{line}</code>''', reply_markup=kb.gen_nick, parse_mode='HTML')
                func.act_count_name("add", message.chat.id,)

        if call.data == 'gene_nick5':
                line = random.choice(open('names.txt').readlines())
                line2 = random.choice(open('names.txt').readlines())
                line3 = random.choice(open('names.txt').readlines())
                line4 = random.choice(open('names.txt').readlines())
                line5 = random.choice(open('names.txt').readlines())
                bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''
‚úÖ <b>–ù–∏–∫–∏</b> —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:
<code>{line}</code>
<code>{line2}</code>
<code>{line3}</code>
<code>{line4}</code>
<code>{line5}</code>''', reply_markup=kb.gen_nick, parse_mode='HTML')
                func.act_count_name("add5", message.chat.id,)

        if call.data == 'generate_pass':
            conn = sqlite3.connect("base.db")
            cursor = conn.cursor()
            kolvo = cursor.execute(f'SELECT kolvo FROM sett WHERE user_id = "{user_id}"').fetchone
            password = gen.hard_pass(12)
            password2 = gen.hard_pass(12)
            password3 = gen.hard_pass(12)
            password4 = gen.hard_pass(12)
            password5 = gen.hard_pass(12)
            bot.send_message(user_id, 
                text=f'''
–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:
<code>{password}</code>
<code>{password2}</code>
<code>{password3}</code>
<code>{password4}</code>
<code>{password5}</code>
''', 
                reply_markup=kb.gen_pass, parse_mode='HTML')

        if call.data == 'back_gen':
            bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:''', reply_markup=kb.gen, parse_mode='HTML')

        if call.data == 'gen_proxy':
            bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:''', reply_markup=kb.gen_proxy, parse_mode='HTML') 

        if call.data == 'generate_proxy':
            try:
                proxy = requests.get('http://d4n13l3k00.ml/api/proxy/socks5?c=10').json()
                if '.' in proxy[0] and ':' in proxy[0] and '.' in proxy[1] and ':' in proxy[1] and '.' in proxy[2] and ':' in proxy[2] and '.' in proxy[5] and ':' in proxy[5]:
                    bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''–í–æ—Ç –≤–∞—à–∏ –ø—Ä–æ–∫—Å–∏:

{proxy[0]}
{proxy[1]}
{proxy[2]}
{proxy[3]}
{proxy[4]}
{proxy[5]}
{proxy[6]}

<b>–ü—Å—Å: socks5</b>''', reply_markup=kb.gen_proxy, parse_mode='HTML')
                    func.act_count_proxies("add", message.chat.id,)
            except Exception as e:
                print(e)
                bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''—Ç–µ—Ö —Ä–æ–±–æ—Ç—ã.. –û–∂–∏–¥–∞–π—Ç–µ''', reply_markup=kb.gen_proxy, parse_mode='HTML')

        if call.data == 'i_bag':
            bot.send_message(u, f'''–ü—Ä–∏–≤–µ—Ç!
üí® –ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥, –æ–ø–æ–≤–µ—Å—Ç–∏—Ç–µ –æ–± —ç—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–¥—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ - @Shifter_LZT
üèÜ –ï—Å–ª–∏ –±–∞–≥ —Å–µ—Ä—å—ë–∑–Ω—ã–π, –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞—Å –≤–æ–∑–Ω–∞–≥—Ä–∞–¥–∏—Ç—å''', reply_markup=kb.main)
            
        if call.data == 'shablon':
            bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:''', reply_markup=kb.shab, parse_mode='HTML')        
            
        if call.data == 'avito':
            bot.edit_message_text(chat_id=u, message_id=message_id, text=f'''üìù –í–æ—Ç –º–µ–Ω—é—à–∫–∞, –≤—ã–±–∏—Ä–∞–π —á—Ç–æ —Ö–æ—á–µ—à—å :)

–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏ /start –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ <b>–ù–ê–ó–ê–î</b> –≤ –º–µ–Ω—é –Ω–∏–∂–µ)''', reply_markup=kb.shablonu, parse_mode='HTML')        
            
    #except Exception as e:
     #   print(e)


    bot.polling(True)
except Exception as e:
    print(e)